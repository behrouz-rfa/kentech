basePath: /api/v1
definitions:
  http.createFilmRequest:
    properties:
      cast:
        items:
          type: string
        type: array
      director:
        type: string
      genre:
        type: string
      releaseDate:
        type: string
      synopsis:
        type: string
      title:
        type: string
    type: object
  http.errorResponse:
    properties:
      messages:
        example:
        - Error message 1
        - ' Error message 2'
        items:
          type: string
        type: array
      success:
        example: false
        type: boolean
    type: object
  http.filmResponse:
    properties:
      cast:
        items:
          type: string
        type: array
      createdAt:
        type: string
      creatorID:
        type: string
      director:
        type: string
      genre:
        $ref: '#/definitions/model.Genre'
      id:
        type: string
      releaseDate:
        type: string
      synopsis:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/model.User'
    type: object
  http.loginRequest:
    properties:
      password:
        example: "12345678"
        minLength: 8
        type: string
      username:
        example: jondoa
        type: string
    required:
    - password
    - username
    type: object
  http.meta:
    properties:
      limit:
        example: 10
        type: integer
      skip:
        example: 0
        type: integer
      total:
        example: 100
        type: integer
    type: object
  http.registerRequest:
    properties:
      firstname:
        example: Jon
        type: string
      lastname:
        example: doa
        type: string
      password:
        example: "12345678"
        minLength: 8
        type: string
      username:
        example: jondoa
        type: string
    required:
    - firstname
    - lastname
    - password
    - username
    type: object
  http.response:
    properties:
      data: {}
      message:
        example: Success
        type: string
      success:
        example: true
        type: boolean
    type: object
  http.updateFilmRequest:
    properties:
      cast:
        items:
          type: string
        type: array
      creatorID:
        type: integer
      director:
        type: string
      genre:
        type: string
      releaseDate:
        type: string
      synopsis:
        type: string
      title:
        type: string
    type: object
  http.updateUserRequest:
    properties:
      firstname:
        example: Jon
        type: string
      lastname:
        example: doa
        type: string
      username:
        example: jondoa
        type: string
    type: object
  http.userResponse:
    properties:
      createdAt:
        type: string
      films:
        items:
          $ref: '#/definitions/model.Film'
        type: array
      firstname:
        type: string
      id:
        type: string
      jwtToken:
        $ref: '#/definitions/model.JWTToken'
      lastname:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  model.Film:
    properties:
      cast:
        items:
          type: string
        type: array
      createdAt:
        type: string
      creatorID:
        type: string
      director:
        type: string
      genre:
        $ref: '#/definitions/model.Genre'
      id:
        type: string
      releaseDate:
        type: string
      synopsis:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/model.User'
    type: object
  model.Genre:
    enum:
    - Action
    - Comedy
    - Drama
    - Horror
    - Romance
    - Sci-Fi
    type: string
    x-enum-varnames:
    - Action
    - Comedy
    - Drama
    - Horror
    - Romance
    - SciFi
  model.JWTToken:
    properties:
      expirationTime:
        type: string
      token:
        type: string
    type: object
  model.User:
    properties:
      createdAt:
        type: string
      films:
        items:
          $ref: '#/definitions/model.Film'
        type: array
      firstname:
        type: string
      id:
        type: string
      jwtToken:
        $ref: '#/definitions/model.JWTToken'
      lastname:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: behrouz-rfa@gmail.com
    name: Behrouz R Faris
    url: github.com/behrouz-rfa/kentech
  description: This is a simple RESTful
  license:
    name: MIT
  title: KenTech
  version: "1.0"
paths:
  /films:
    get:
      consumes:
      - application/json
      description: List films with pagination
      parameters:
      - description: Page
        in: query
        name: page
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      - description: Genre
        in: query
        name: genre
        type: string
      - description: Title
        in: query
        name: title
        type: string
      - description: From
        in: query
        name: from
        type: string
      - description: To
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Films displayed
          schema:
            $ref: '#/definitions/http.meta'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: List films
      tags:
      - Films
    post:
      consumes:
      - application/json
      description: create a film
      parameters:
      - description: Create film request
        in: body
        name: createFilmRequest
        required: true
        schema:
          $ref: '#/definitions/http.createFilmRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Film updated
          schema:
            $ref: '#/definitions/http.filmResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Create a film
      tags:
      - Films
  /films/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a film by id
      parameters:
      - description: Film ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Film deleted
          schema:
            $ref: '#/definitions/http.response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Delete a film
      tags:
      - Films
    get:
      consumes:
      - application/json
      description: Get a film by id
      parameters:
      - description: Film ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Film displayed
          schema:
            $ref: '#/definitions/http.filmResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Get a film
      tags:
      - Films
    put:
      consumes:
      - application/json
      description: Update a film's name, email, password, or role by id
      parameters:
      - description: Film ID
        in: path
        name: id
        required: true
        type: string
      - description: Update film request
        in: body
        name: updateFilmRequest
        required: true
        schema:
          $ref: '#/definitions/http.updateFilmRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Film updated
          schema:
            $ref: '#/definitions/http.filmResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Update a film
      tags:
      - Films
  /users:
    get:
      consumes:
      - application/json
      description: List users with pagination
      parameters:
      - description: Page
        in: query
        name: page
        required: true
        type: integer
      - description: Limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Users displayed
          schema:
            $ref: '#/definitions/http.meta'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted
          schema:
            $ref: '#/definitions/http.response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get a user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User displayed
          schema:
            $ref: '#/definitions/http.userResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Get a user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update a user's name, email, password, or role by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Update user request
        in: body
        name: updateUserRequest
        required: true
        schema:
          $ref: '#/definitions/http.updateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated
          schema:
            $ref: '#/definitions/http.userResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - Users
  /users/login:
    post:
      consumes:
      - application/json
      description: create a new user account with default role "cashier"
      parameters:
      - description: Register request
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/http.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User created
          schema:
            $ref: '#/definitions/http.userResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "409":
          description: Data conflict error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      summary: Register a new user
      tags:
      - Users
  /users/register:
    post:
      consumes:
      - application/json
      description: create a new user account with default role "cashier"
      parameters:
      - description: Register request
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/http.registerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User created
          schema:
            $ref: '#/definitions/http.userResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "409":
          description: Data conflict error
          schema:
            $ref: '#/definitions/http.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/http.errorResponse'
      summary: Register a new user
      tags:
      - Users
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and the access token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
